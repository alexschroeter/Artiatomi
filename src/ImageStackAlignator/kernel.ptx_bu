//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21112126
// Cuda compilation tools, release 8.0, V8.0.43
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_20
.address_size 64

	// .globl	fourierFilter

.visible .entry fourierFilter(
	.param .u64 fourierFilter_param_0,
	.param .u64 fourierFilter_param_1,
	.param .u32 fourierFilter_param_2,
	.param .f32 fourierFilter_param_3,
	.param .f32 fourierFilter_param_4,
	.param .f32 fourierFilter_param_5,
	.param .f32 fourierFilter_param_6
)
{
	.reg .pred 	%p<26>;
	.reg .f32 	%f<98>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [fourierFilter_param_0];
	ld.param.u64 	%rd2, [fourierFilter_param_1];
	ld.param.f32 	%f15, [fourierFilter_param_3];
	ld.param.f32 	%f16, [fourierFilter_param_4];
	ld.param.f32 	%f17, [fourierFilter_param_5];
	ld.param.f32 	%f18, [fourierFilter_param_6];
	ld.param.u32 	%r4, [fourierFilter_param_2];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	shr.u32 	%r11, %r4, 31;
	add.s32 	%r12, %r4, %r11;
	shr.s32 	%r3, %r12, 1;
	add.s32 	%r13, %r3, 1;
	setp.ge.s32	%p1, %r1, %r13;
	setp.ge.s32	%p2, %r2, %r4;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB0_11;

	cvt.rn.f32.s32	%f19, %r1;
	cvt.rn.f32.s32	%f20, %r4;
	mul.f32 	%f21, %f20, 0f3F000000;
	cvt.rn.f32.s32	%f22, %r2;
	setp.gt.f32	%p4, %f22, %f21;
	sub.f32 	%f23, %f20, %f22;
	neg.f32 	%f24, %f23;
	selp.f32	%f25, %f24, %f22, %p4;
	mul.f32 	%f26, %f25, %f25;
	fma.rn.f32 	%f27, %f19, %f19, %f26;
	sqrt.rn.f32 	%f1, %f27;
	add.f32 	%f2, %f16, %f18;
	sub.f32 	%f3, %f15, %f17;
	setp.gt.f32	%p5, %f3, 0f00000000;
	mov.f32 	%f96, %f3;
	@%p5 bra 	BB0_3;

	add.s32 	%r14, %r3, -1;
	cvt.rn.f32.s32	%f4, %r14;
	mov.f32 	%f96, %f4;

BB0_3:
	mov.f32 	%f5, %f96;
	setp.le.f32	%p6, %f1, %f5;
	selp.f32	%f97, 0f3F800000, 0f00000000, %p6;
	setp.leu.f32	%p7, %f17, 0f00000000;
	@%p7 bra 	BB0_5;

	mov.f32 	%f30, 0f3F800000;
	sub.f32 	%f31, %f30, %f97;
	sub.f32 	%f32, %f1, %f3;
	mul.f32 	%f33, %f32, %f32;
	add.f32 	%f34, %f17, %f17;
	mul.f32 	%f35, %f34, %f17;
	div.rn.f32 	%f36, %f33, %f35;
	neg.f32 	%f37, %f36;
	mul.f32 	%f38, %f36, 0fBFB8AA3B;
	cvt.rzi.f32.f32	%f39, %f38;
	mov.f32 	%f40, 0fBF317200;
	fma.rn.f32 	%f41, %f39, %f40, %f37;
	mov.f32 	%f42, 0fB5BFBE8E;
	fma.rn.f32 	%f43, %f39, %f42, %f41;
	mul.f32 	%f29, %f43, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f28,%f29;
	// inline asm
	add.f32 	%f44, %f39, 0f00000000;
	ex2.approx.f32 	%f45, %f44;
	mul.f32 	%f46, %f28, %f45;
	setp.gt.f32	%p8, %f36, 0f42D20000;
	selp.f32	%f47, 0f00000000, %f46, %p8;
	setp.lt.f32	%p9, %f36, 0fC2D20000;
	selp.f32	%f48, 0f7F800000, %f47, %p9;
	mul.f32 	%f49, %f31, %f48;
	setp.gt.f32	%p10, %f49, 0f3A83126F;
	selp.f32	%f97, %f49, %f97, %p10;

BB0_5:
	setp.eq.f32	%p11, %f3, 0f00000000;
	setp.gt.f32	%p12, %f17, 0f00000000;
	and.pred  	%p13, %p12, %p11;
	setp.eq.f32	%p14, %f2, 0f00000000;
	and.pred  	%p15, %p13, %p14;
	setp.eq.f32	%p16, %f18, 0f00000000;
	and.pred  	%p17, %p15, %p16;
	@!%p17 bra 	BB0_7;
	bra.uni 	BB0_6;

BB0_6:
	sub.f32 	%f52, %f1, %f3;
	mul.f32 	%f53, %f52, %f52;
	add.f32 	%f54, %f17, %f17;
	mul.f32 	%f55, %f54, %f17;
	div.rn.f32 	%f56, %f53, %f55;
	neg.f32 	%f57, %f56;
	mul.f32 	%f58, %f56, 0fBFB8AA3B;
	cvt.rzi.f32.f32	%f59, %f58;
	mov.f32 	%f60, 0fBF317200;
	fma.rn.f32 	%f61, %f59, %f60, %f57;
	mov.f32 	%f62, 0fB5BFBE8E;
	fma.rn.f32 	%f63, %f59, %f62, %f61;
	mul.f32 	%f51, %f63, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f50,%f51;
	// inline asm
	add.f32 	%f64, %f59, 0f00000000;
	ex2.approx.f32 	%f65, %f64;
	mul.f32 	%f66, %f50, %f65;
	setp.gt.f32	%p18, %f56, 0f42D20000;
	selp.f32	%f67, 0f00000000, %f66, %p18;
	setp.lt.f32	%p19, %f56, 0fC2D20000;
	selp.f32	%f97, 0f7F800000, %f67, %p19;

BB0_7:
	setp.leu.f32	%p20, %f2, 0f00000000;
	@%p20 bra 	BB0_10;

	setp.ge.f32	%p21, %f1, %f2;
	selp.f32	%f11, 0f3F800000, 0f00000000, %p21;
	mul.f32 	%f97, %f11, %f97;
	setp.leu.f32	%p22, %f18, 0f00000000;
	@%p22 bra 	BB0_10;

	mov.f32 	%f70, 0f3F800000;
	sub.f32 	%f71, %f70, %f11;
	sub.f32 	%f72, %f1, %f2;
	mul.f32 	%f73, %f72, %f72;
	add.f32 	%f74, %f18, %f18;
	mul.f32 	%f75, %f74, %f18;
	div.rn.f32 	%f76, %f73, %f75;
	neg.f32 	%f77, %f76;
	mul.f32 	%f78, %f76, 0fBFB8AA3B;
	cvt.rzi.f32.f32	%f79, %f78;
	mov.f32 	%f80, 0fBF317200;
	fma.rn.f32 	%f81, %f79, %f80, %f77;
	mov.f32 	%f82, 0fB5BFBE8E;
	fma.rn.f32 	%f83, %f79, %f82, %f81;
	mul.f32 	%f69, %f83, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f68,%f69;
	// inline asm
	add.f32 	%f84, %f79, 0f00000000;
	ex2.approx.f32 	%f85, %f84;
	mul.f32 	%f86, %f68, %f85;
	setp.gt.f32	%p23, %f76, 0f42D20000;
	selp.f32	%f87, 0f00000000, %f86, %p23;
	setp.lt.f32	%p24, %f76, 0fC2D20000;
	selp.f32	%f88, 0f7F800000, %f87, %p24;
	mul.f32 	%f89, %f71, %f88;
	setp.gt.f32	%p25, %f89, 0f3A83126F;
	selp.f32	%f97, %f89, %f97, %p25;

BB0_10:
	cvt.s64.s32	%rd3, %r2;
	mul.lo.s64 	%rd4, %rd3, %rd2;
	cvta.to.global.u64 	%rd5, %rd1;
	add.s64 	%rd6, %rd5, %rd4;
	mul.wide.s32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.v2.f32 	{%f90, %f91}, [%rd8];
	mul.f32 	%f94, %f97, %f91;
	mul.f32 	%f95, %f97, %f90;
	st.global.v2.f32 	[%rd8], {%f95, %f94};

BB0_11:
	ret;
}

	// .globl	conjMul
.visible .entry conjMul(
	.param .u64 conjMul_param_0,
	.param .u64 conjMul_param_1,
	.param .u64 conjMul_param_2,
	.param .u32 conjMul_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [conjMul_param_0];
	ld.param.u64 	%rd2, [conjMul_param_1];
	ld.param.u64 	%rd3, [conjMul_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	mov.u32 	%r6, %ntid.y;
	mov.u32 	%r7, %ctaid.y;
	mov.u32 	%r8, %tid.y;
	mad.lo.s32 	%r2, %r6, %r7, %r8;
	ld.param.u32 	%r9, [conjMul_param_3];
	shr.u32 	%r10, %r9, 31;
	add.s32 	%r11, %r9, %r10;
	shr.s32 	%r12, %r11, 1;
	add.s32 	%r13, %r12, 1;
	setp.ge.u32	%p1, %r1, %r13;
	setp.ge.u32	%p2, %r2, %r9;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB1_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvt.u64.u32	%rd5, %r2;
	mul.lo.s64 	%rd6, %rd5, %rd3;
	add.s64 	%rd7, %rd4, %rd6;
	cvta.to.global.u64 	%rd8, %rd2;
	add.s64 	%rd9, %rd8, %rd6;
	mul.wide.u32 	%rd10, %r1, 8;
	add.s64 	%rd11, %rd7, %rd10;
	add.s64 	%rd12, %rd9, %rd10;
	ld.global.v2.f32 	{%f1, %f2}, [%rd12];
	ld.global.v2.f32 	{%f5, %f6}, [%rd11];
	mul.f32 	%f9, %f6, %f2;
	mul.f32 	%f10, %f5, %f2;
	mul.f32 	%f11, %f6, %f1;
	sub.f32 	%f12, %f10, %f11;
	fma.rn.f32 	%f13, %f5, %f1, %f9;
	st.global.v2.f32 	[%rd11], {%f13, %f12};

BB1_2:
	ret;
}

	// .globl	maxShift
.visible .entry maxShift(
	.param .u64 maxShift_param_0,
	.param .u64 maxShift_param_1,
	.param .u32 maxShift_param_2,
	.param .u32 maxShift_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<16>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [maxShift_param_0];
	ld.param.u64 	%rd2, [maxShift_param_1];
	ld.param.u32 	%r3, [maxShift_param_2];
	ld.param.u32 	%r4, [maxShift_param_3];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.ge.u32	%p1, %r1, %r3;
	setp.ge.u32	%p2, %r2, %r3;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB2_7;

	cvt.rn.f32.u32	%f14, %r1;
	cvt.rn.f32.u32	%f15, %r2;
	shr.u32 	%r11, %r3, 31;
	add.s32 	%r12, %r3, %r11;
	shr.s32 	%r13, %r12, 1;
	cvt.rn.f32.s32	%f3, %r13;
	setp.leu.f32	%p4, %f14, %f3;
	@%p4 bra 	BB2_3;

	cvt.rn.f32.s32	%f8, %r3;
	sub.f32 	%f14, %f8, %f14;

BB2_3:
	setp.leu.f32	%p5, %f15, %f3;
	@%p5 bra 	BB2_5;

	cvt.rn.f32.s32	%f9, %r3;
	sub.f32 	%f15, %f9, %f15;

BB2_5:
	mul.f32 	%f10, %f15, %f15;
	fma.rn.f32 	%f11, %f14, %f14, %f10;
	sqrt.rn.f32 	%f12, %f11;
	cvt.rn.f32.s32	%f13, %r4;
	setp.leu.f32	%p6, %f12, %f13;
	@%p6 bra 	BB2_7;

	cvta.to.global.u64 	%rd3, %rd1;
	cvt.u64.u32	%rd4, %r2;
	mul.lo.s64 	%rd5, %rd4, %rd2;
	add.s64 	%rd6, %rd3, %rd5;
	mul.wide.u32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	mov.u32 	%r14, 0;
	st.global.u32 	[%rd8], %r14;

BB2_7:
	ret;
}

	// .globl	SumRow
.visible .entry SumRow(
	.param .u64 SumRow_param_0,
	.param .u64 SumRow_param_1,
	.param .u32 SumRow_param_2,
	.param .u32 SumRow_param_3,
	.param .u64 SumRow_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd4, [SumRow_param_0];
	ld.param.u64 	%rd5, [SumRow_param_1];
	ld.param.u32 	%r7, [SumRow_param_2];
	ld.param.u32 	%r8, [SumRow_param_3];
	ld.param.u64 	%rd6, [SumRow_param_4];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.u32	%p1, %r4, %r8;
	@%p1 bra 	BB3_5;

	mov.f32 	%f7, 0f00000000;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB3_4;

	cvta.to.global.u64 	%rd7, %rd4;
	cvt.u64.u32	%rd8, %r4;
	mul.lo.s64 	%rd9, %rd5, %rd8;
	add.s64 	%rd13, %rd7, %rd9;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r11, 0;

BB3_3:
	ld.global.f32 	%f6, [%rd13];
	add.f32 	%f7, %f7, %f6;
	add.s64 	%rd13, %rd13, 4;
	add.s32 	%r11, %r11, 1;
	setp.lt.s32	%p3, %r11, %r7;
	@%p3 bra 	BB3_3;

BB3_4:
	cvta.to.global.u64 	%rd10, %rd6;
	mul.wide.u32 	%rd11, %r4, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f7;

BB3_5:
	ret;
}

	// .globl	CreateMask
.visible .entry CreateMask(
	.param .u64 CreateMask_param_0,
	.param .u64 CreateMask_param_1,
	.param .u32 CreateMask_param_2,
	.param .u32 CreateMask_param_3,
	.param .u64 CreateMask_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [CreateMask_param_0];
	ld.param.u64 	%rd2, [CreateMask_param_1];
	ld.param.u32 	%r3, [CreateMask_param_2];
	ld.param.u32 	%r4, [CreateMask_param_3];
	ld.param.u64 	%rd3, [CreateMask_param_4];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.ge.u32	%p1, %r1, %r3;
	setp.ge.u32	%p2, %r2, %r4;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB4_2;

	cvta.to.global.u64 	%rd4, %rd3;
	cvt.u64.u32	%rd5, %r2;
	mul.wide.u32 	%rd6, %r2, 4;
	add.s64 	%rd7, %rd4, %rd6;
	ld.global.f32 	%f1, [%rd7];
	setp.neu.f32	%p4, %f1, 0f00000000;
	selp.b16	%rs1, -1, 0, %p4;
	mul.lo.s64 	%rd8, %rd5, %rd2;
	cvt.u64.u32	%rd9, %r1;
	add.s64 	%rd10, %rd8, %rd9;
	cvta.to.global.u64 	%rd11, %rd1;
	add.s64 	%rd12, %rd11, %rd10;
	st.global.u8 	[%rd12], %rs1;

BB4_2:
	ret;
}


